// Code generated by mockery v2.36.0. DO NOT EDIT.

package mock_repository

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "im/internal/models"

	req "im/internal/models/req"
)

// MockGroupMembersRepository is an autogenerated mock type for the IGroupMembersRepository type
type MockGroupMembersRepository struct {
	mock.Mock
}

type MockGroupMembersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGroupMembersRepository) EXPECT() *MockGroupMembersRepository_Expecter {
	return &MockGroupMembersRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: db, data
func (_m *MockGroupMembersRepository) Create(db *gorm.DB, data *models.GroupMembers) (interface{}, error) {
	ret := _m.Called(db, data)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.GroupMembers) (interface{}, error)); ok {
		return rf(db, data)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.GroupMembers) interface{}); ok {
		r0 = rf(db, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *models.GroupMembers) error); ok {
		r1 = rf(db, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGroupMembersRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockGroupMembersRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - db *gorm.DB
//   - data *models.GroupMembers
func (_e *MockGroupMembersRepository_Expecter) Create(db interface{}, data interface{}) *MockGroupMembersRepository_Create_Call {
	return &MockGroupMembersRepository_Create_Call{Call: _e.mock.On("Create", db, data)}
}

func (_c *MockGroupMembersRepository_Create_Call) Run(run func(db *gorm.DB, data *models.GroupMembers)) *MockGroupMembersRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.GroupMembers))
	})
	return _c
}

func (_c *MockGroupMembersRepository_Create_Call) Return(id interface{}, err error) *MockGroupMembersRepository_Create_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockGroupMembersRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *models.GroupMembers) (interface{}, error)) *MockGroupMembersRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: db, id
func (_m *MockGroupMembersRepository) Delete(db *gorm.DB, id string) error {
	ret := _m.Called(db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGroupMembersRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockGroupMembersRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - db *gorm.DB
//   - id string
func (_e *MockGroupMembersRepository_Expecter) Delete(db interface{}, id interface{}) *MockGroupMembersRepository_Delete_Call {
	return &MockGroupMembersRepository_Delete_Call{Call: _e.mock.On("Delete", db, id)}
}

func (_c *MockGroupMembersRepository_Delete_Call) Run(run func(db *gorm.DB, id string)) *MockGroupMembersRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *MockGroupMembersRepository_Delete_Call) Return(err error) *MockGroupMembersRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGroupMembersRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, string) error) *MockGroupMembersRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: db, cond
func (_m *MockGroupMembersRepository) Get(db *gorm.DB, cond *req.GroupMembersGet) (*models.GroupMembers, error) {
	ret := _m.Called(db, cond)

	var r0 *models.GroupMembers
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *req.GroupMembersGet) (*models.GroupMembers, error)); ok {
		return rf(db, cond)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *req.GroupMembersGet) *models.GroupMembers); ok {
		r0 = rf(db, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GroupMembers)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *req.GroupMembersGet) error); ok {
		r1 = rf(db, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGroupMembersRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockGroupMembersRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - db *gorm.DB
//   - cond *req.GroupMembersGet
func (_e *MockGroupMembersRepository_Expecter) Get(db interface{}, cond interface{}) *MockGroupMembersRepository_Get_Call {
	return &MockGroupMembersRepository_Get_Call{Call: _e.mock.On("Get", db, cond)}
}

func (_c *MockGroupMembersRepository_Get_Call) Run(run func(db *gorm.DB, cond *req.GroupMembersGet)) *MockGroupMembersRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*req.GroupMembersGet))
	})
	return _c
}

func (_c *MockGroupMembersRepository_Get_Call) Return(_a0 *models.GroupMembers, _a1 error) *MockGroupMembersRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGroupMembersRepository_Get_Call) RunAndReturn(run func(*gorm.DB, *req.GroupMembersGet) (*models.GroupMembers, error)) *MockGroupMembersRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: db, cond
func (_m *MockGroupMembersRepository) GetList(db *gorm.DB, cond *req.GroupMembersGetList) (*models.PageResult[*models.GroupMembers], error) {
	ret := _m.Called(db, cond)

	var r0 *models.PageResult[*models.GroupMembers]
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *req.GroupMembersGetList) (*models.PageResult[*models.GroupMembers], error)); ok {
		return rf(db, cond)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *req.GroupMembersGetList) *models.PageResult[*models.GroupMembers]); ok {
		r0 = rf(db, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PageResult[*models.GroupMembers])
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *req.GroupMembersGetList) error); ok {
		r1 = rf(db, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGroupMembersRepository_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockGroupMembersRepository_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - db *gorm.DB
//   - cond *req.GroupMembersGetList
func (_e *MockGroupMembersRepository_Expecter) GetList(db interface{}, cond interface{}) *MockGroupMembersRepository_GetList_Call {
	return &MockGroupMembersRepository_GetList_Call{Call: _e.mock.On("GetList", db, cond)}
}

func (_c *MockGroupMembersRepository_GetList_Call) Run(run func(db *gorm.DB, cond *req.GroupMembersGetList)) *MockGroupMembersRepository_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*req.GroupMembersGetList))
	})
	return _c
}

func (_c *MockGroupMembersRepository_GetList_Call) Return(_a0 *models.PageResult[*models.GroupMembers], _a1 error) *MockGroupMembersRepository_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGroupMembersRepository_GetList_Call) RunAndReturn(run func(*gorm.DB, *req.GroupMembersGetList) (*models.PageResult[*models.GroupMembers], error)) *MockGroupMembersRepository_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// GetListById provides a mock function with given fields: ctx, db, cond
func (_m *MockGroupMembersRepository) GetListById(ctx context.Context, db *gorm.DB, cond *req.GroupMembersGetList) ([]*models.GroupMembers, error) {
	ret := _m.Called(ctx, db, cond)

	var r0 []*models.GroupMembers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *req.GroupMembersGetList) ([]*models.GroupMembers, error)); ok {
		return rf(ctx, db, cond)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *req.GroupMembersGetList) []*models.GroupMembers); ok {
		r0 = rf(ctx, db, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.GroupMembers)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *req.GroupMembersGetList) error); ok {
		r1 = rf(ctx, db, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGroupMembersRepository_GetListById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListById'
type MockGroupMembersRepository_GetListById_Call struct {
	*mock.Call
}

// GetListById is a helper method to define mock.On call
//   - ctx context.Context
//   - db *gorm.DB
//   - cond *req.GroupMembersGetList
func (_e *MockGroupMembersRepository_Expecter) GetListById(ctx interface{}, db interface{}, cond interface{}) *MockGroupMembersRepository_GetListById_Call {
	return &MockGroupMembersRepository_GetListById_Call{Call: _e.mock.On("GetListById", ctx, db, cond)}
}

func (_c *MockGroupMembersRepository_GetListById_Call) Run(run func(ctx context.Context, db *gorm.DB, cond *req.GroupMembersGetList)) *MockGroupMembersRepository_GetListById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*req.GroupMembersGetList))
	})
	return _c
}

func (_c *MockGroupMembersRepository_GetListById_Call) Return(_a0 []*models.GroupMembers, _a1 error) *MockGroupMembersRepository_GetListById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGroupMembersRepository_GetListById_Call) RunAndReturn(run func(context.Context, *gorm.DB, *req.GroupMembersGetList) ([]*models.GroupMembers, error)) *MockGroupMembersRepository_GetListById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: db, data
func (_m *MockGroupMembersRepository) Update(db *gorm.DB, data *models.GroupMembers) error {
	ret := _m.Called(db, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.GroupMembers) error); ok {
		r0 = rf(db, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGroupMembersRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockGroupMembersRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - db *gorm.DB
//   - data *models.GroupMembers
func (_e *MockGroupMembersRepository_Expecter) Update(db interface{}, data interface{}) *MockGroupMembersRepository_Update_Call {
	return &MockGroupMembersRepository_Update_Call{Call: _e.mock.On("Update", db, data)}
}

func (_c *MockGroupMembersRepository_Update_Call) Run(run func(db *gorm.DB, data *models.GroupMembers)) *MockGroupMembersRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.GroupMembers))
	})
	return _c
}

func (_c *MockGroupMembersRepository_Update_Call) Return(err error) *MockGroupMembersRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGroupMembersRepository_Update_Call) RunAndReturn(run func(*gorm.DB, *models.GroupMembers) error) *MockGroupMembersRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGroupMembersRepository creates a new instance of MockGroupMembersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGroupMembersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGroupMembersRepository {
	mock := &MockGroupMembersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
