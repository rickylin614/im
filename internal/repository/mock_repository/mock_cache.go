// Code generated by mockery v2.36.0. DO NOT EDIT.

package mock_repository

import (
	context "context"
	models "im/internal/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockCacheRepository is an autogenerated mock type for the ICacheRepository type
type MockCacheRepository struct {
	mock.Mock
}

type MockCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheRepository) EXPECT() *MockCacheRepository_Expecter {
	return &MockCacheRepository_Expecter{mock: &_m.Mock}
}

// GetCache provides a mock function with given fields: ctx, key
func (_m *MockCacheRepository) GetCache(ctx context.Context, key string) ([]byte, error) {
	ret := _m.Called(ctx, key)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheRepository_GetCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCache'
type MockCacheRepository_GetCache_Call struct {
	*mock.Call
}

// GetCache is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheRepository_Expecter) GetCache(ctx interface{}, key interface{}) *MockCacheRepository_GetCache_Call {
	return &MockCacheRepository_GetCache_Call{Call: _e.mock.On("GetCache", ctx, key)}
}

func (_c *MockCacheRepository_GetCache_Call) Run(run func(ctx context.Context, key string)) *MockCacheRepository_GetCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCacheRepository_GetCache_Call) Return(_a0 []byte, _a1 error) *MockCacheRepository_GetCache_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheRepository_GetCache_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *MockCacheRepository_GetCache_Call {
	_c.Call.Return(run)
	return _c
}

// GetRouteCache provides a mock function with given fields: ctx, cond
func (_m *MockCacheRepository) GetRouteCache(ctx context.Context, cond *models.RouteCacheGet) (*models.RouteCache, error) {
	ret := _m.Called(ctx, cond)

	var r0 *models.RouteCache
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RouteCacheGet) (*models.RouteCache, error)); ok {
		return rf(ctx, cond)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.RouteCacheGet) *models.RouteCache); ok {
		r0 = rf(ctx, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RouteCache)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.RouteCacheGet) error); ok {
		r1 = rf(ctx, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheRepository_GetRouteCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRouteCache'
type MockCacheRepository_GetRouteCache_Call struct {
	*mock.Call
}

// GetRouteCache is a helper method to define mock.On call
//   - ctx context.Context
//   - cond *models.RouteCacheGet
func (_e *MockCacheRepository_Expecter) GetRouteCache(ctx interface{}, cond interface{}) *MockCacheRepository_GetRouteCache_Call {
	return &MockCacheRepository_GetRouteCache_Call{Call: _e.mock.On("GetRouteCache", ctx, cond)}
}

func (_c *MockCacheRepository_GetRouteCache_Call) Run(run func(ctx context.Context, cond *models.RouteCacheGet)) *MockCacheRepository_GetRouteCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.RouteCacheGet))
	})
	return _c
}

func (_c *MockCacheRepository_GetRouteCache_Call) Return(_a0 *models.RouteCache, _a1 error) *MockCacheRepository_GetRouteCache_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheRepository_GetRouteCache_Call) RunAndReturn(run func(context.Context, *models.RouteCacheGet) (*models.RouteCache, error)) *MockCacheRepository_GetRouteCache_Call {
	_c.Call.Return(run)
	return _c
}

// SetCache provides a mock function with given fields: ctx, key, value, ttl
func (_m *MockCacheRepository) SetCache(ctx context.Context, key string, value []byte, ttl time.Duration) error {
	ret := _m.Called(ctx, key, value, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) error); ok {
		r0 = rf(ctx, key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheRepository_SetCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCache'
type MockCacheRepository_SetCache_Call struct {
	*mock.Call
}

// SetCache is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value []byte
//   - ttl time.Duration
func (_e *MockCacheRepository_Expecter) SetCache(ctx interface{}, key interface{}, value interface{}, ttl interface{}) *MockCacheRepository_SetCache_Call {
	return &MockCacheRepository_SetCache_Call{Call: _e.mock.On("SetCache", ctx, key, value, ttl)}
}

func (_c *MockCacheRepository_SetCache_Call) Run(run func(ctx context.Context, key string, value []byte, ttl time.Duration)) *MockCacheRepository_SetCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockCacheRepository_SetCache_Call) Return(_a0 error) *MockCacheRepository_SetCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheRepository_SetCache_Call) RunAndReturn(run func(context.Context, string, []byte, time.Duration) error) *MockCacheRepository_SetCache_Call {
	_c.Call.Return(run)
	return _c
}

// SetRouteCache provides a mock function with given fields: ctx, cond
func (_m *MockCacheRepository) SetRouteCache(ctx context.Context, cond *models.RouteCacheSet) error {
	ret := _m.Called(ctx, cond)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RouteCacheSet) error); ok {
		r0 = rf(ctx, cond)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheRepository_SetRouteCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRouteCache'
type MockCacheRepository_SetRouteCache_Call struct {
	*mock.Call
}

// SetRouteCache is a helper method to define mock.On call
//   - ctx context.Context
//   - cond *models.RouteCacheSet
func (_e *MockCacheRepository_Expecter) SetRouteCache(ctx interface{}, cond interface{}) *MockCacheRepository_SetRouteCache_Call {
	return &MockCacheRepository_SetRouteCache_Call{Call: _e.mock.On("SetRouteCache", ctx, cond)}
}

func (_c *MockCacheRepository_SetRouteCache_Call) Run(run func(ctx context.Context, cond *models.RouteCacheSet)) *MockCacheRepository_SetRouteCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.RouteCacheSet))
	})
	return _c
}

func (_c *MockCacheRepository_SetRouteCache_Call) Return(_a0 error) *MockCacheRepository_SetRouteCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheRepository_SetRouteCache_Call) RunAndReturn(run func(context.Context, *models.RouteCacheSet) error) *MockCacheRepository_SetRouteCache_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheRepository creates a new instance of MockCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheRepository {
	mock := &MockCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
