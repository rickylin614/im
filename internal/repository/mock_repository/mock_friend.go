// Code generated by mockery v2.36.0. DO NOT EDIT.

package mock_repository

import (
	models "im/internal/models"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	req "im/internal/models/req"
)

// MockFriendRepository is an autogenerated mock type for the IFriendRepository type
type MockFriendRepository struct {
	mock.Mock
}

type MockFriendRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFriendRepository) EXPECT() *MockFriendRepository_Expecter {
	return &MockFriendRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: db, data
func (_m *MockFriendRepository) Create(db *gorm.DB, data *models.Friend) (interface{}, error) {
	ret := _m.Called(db, data)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Friend) (interface{}, error)); ok {
		return rf(db, data)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Friend) interface{}); ok {
		r0 = rf(db, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *models.Friend) error); ok {
		r1 = rf(db, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFriendRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFriendRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - db *gorm.DB
//   - data *models.Friend
func (_e *MockFriendRepository_Expecter) Create(db interface{}, data interface{}) *MockFriendRepository_Create_Call {
	return &MockFriendRepository_Create_Call{Call: _e.mock.On("Create", db, data)}
}

func (_c *MockFriendRepository_Create_Call) Run(run func(db *gorm.DB, data *models.Friend)) *MockFriendRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Friend))
	})
	return _c
}

func (_c *MockFriendRepository_Create_Call) Return(id interface{}, err error) *MockFriendRepository_Create_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockFriendRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *models.Friend) (interface{}, error)) *MockFriendRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: db, id
func (_m *MockFriendRepository) Delete(db *gorm.DB, id string) error {
	ret := _m.Called(db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFriendRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFriendRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - db *gorm.DB
//   - id string
func (_e *MockFriendRepository_Expecter) Delete(db interface{}, id interface{}) *MockFriendRepository_Delete_Call {
	return &MockFriendRepository_Delete_Call{Call: _e.mock.On("Delete", db, id)}
}

func (_c *MockFriendRepository_Delete_Call) Run(run func(db *gorm.DB, id string)) *MockFriendRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *MockFriendRepository_Delete_Call) Return(err error) *MockFriendRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFriendRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, string) error) *MockFriendRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: db, cond
func (_m *MockFriendRepository) Get(db *gorm.DB, cond *req.FriendGet) (*models.Friend, error) {
	ret := _m.Called(db, cond)

	var r0 *models.Friend
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *req.FriendGet) (*models.Friend, error)); ok {
		return rf(db, cond)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *req.FriendGet) *models.Friend); ok {
		r0 = rf(db, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Friend)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *req.FriendGet) error); ok {
		r1 = rf(db, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFriendRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRouteCache'
type MockFriendRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - db *gorm.DB
//   - cond *req.FriendGet
func (_e *MockFriendRepository_Expecter) Get(db interface{}, cond interface{}) *MockFriendRepository_Get_Call {
	return &MockFriendRepository_Get_Call{Call: _e.mock.On("GetRouteCache", db, cond)}
}

func (_c *MockFriendRepository_Get_Call) Run(run func(db *gorm.DB, cond *req.FriendGet)) *MockFriendRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*req.FriendGet))
	})
	return _c
}

func (_c *MockFriendRepository_Get_Call) Return(_a0 *models.Friend, _a1 error) *MockFriendRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFriendRepository_Get_Call) RunAndReturn(run func(*gorm.DB, *req.FriendGet) (*models.Friend, error)) *MockFriendRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: db, cond
func (_m *MockFriendRepository) GetList(db *gorm.DB, cond *req.FriendGetList) (*models.PageResult[*models.Friend], error) {
	ret := _m.Called(db, cond)

	var r0 *models.PageResult[*models.Friend]
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *req.FriendGetList) (*models.PageResult[*models.Friend], error)); ok {
		return rf(db, cond)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *req.FriendGetList) *models.PageResult[*models.Friend]); ok {
		r0 = rf(db, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PageResult[*models.Friend])
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *req.FriendGetList) error); ok {
		r1 = rf(db, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFriendRepository_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockFriendRepository_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - db *gorm.DB
//   - cond *req.FriendGetList
func (_e *MockFriendRepository_Expecter) GetList(db interface{}, cond interface{}) *MockFriendRepository_GetList_Call {
	return &MockFriendRepository_GetList_Call{Call: _e.mock.On("GetList", db, cond)}
}

func (_c *MockFriendRepository_GetList_Call) Run(run func(db *gorm.DB, cond *req.FriendGetList)) *MockFriendRepository_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*req.FriendGetList))
	})
	return _c
}

func (_c *MockFriendRepository_GetList_Call) Return(_a0 *models.PageResult[*models.Friend], _a1 error) *MockFriendRepository_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFriendRepository_GetList_Call) RunAndReturn(run func(*gorm.DB, *req.FriendGetList) (*models.PageResult[*models.Friend], error)) *MockFriendRepository_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// GetMutualList provides a mock function with given fields: db, cond
func (_m *MockFriendRepository) GetMutualList(db *gorm.DB, cond *req.FriendMutualGet) (*models.PageResult[*models.Friend], error) {
	ret := _m.Called(db, cond)

	var r0 *models.PageResult[*models.Friend]
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *req.FriendMutualGet) (*models.PageResult[*models.Friend], error)); ok {
		return rf(db, cond)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *req.FriendMutualGet) *models.PageResult[*models.Friend]); ok {
		r0 = rf(db, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PageResult[*models.Friend])
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *req.FriendMutualGet) error); ok {
		r1 = rf(db, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFriendRepository_GetMutualList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMutualList'
type MockFriendRepository_GetMutualList_Call struct {
	*mock.Call
}

// GetMutualList is a helper method to define mock.On call
//   - db *gorm.DB
//   - cond *req.FriendMutualGet
func (_e *MockFriendRepository_Expecter) GetMutualList(db interface{}, cond interface{}) *MockFriendRepository_GetMutualList_Call {
	return &MockFriendRepository_GetMutualList_Call{Call: _e.mock.On("GetMutualList", db, cond)}
}

func (_c *MockFriendRepository_GetMutualList_Call) Run(run func(db *gorm.DB, cond *req.FriendMutualGet)) *MockFriendRepository_GetMutualList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*req.FriendMutualGet))
	})
	return _c
}

func (_c *MockFriendRepository_GetMutualList_Call) Return(_a0 *models.PageResult[*models.Friend], _a1 error) *MockFriendRepository_GetMutualList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFriendRepository_GetMutualList_Call) RunAndReturn(run func(*gorm.DB, *req.FriendMutualGet) (*models.PageResult[*models.Friend], error)) *MockFriendRepository_GetMutualList_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: db, data
func (_m *MockFriendRepository) Update(db *gorm.DB, data *models.Friend) error {
	ret := _m.Called(db, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Friend) error); ok {
		r0 = rf(db, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFriendRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFriendRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - db *gorm.DB
//   - data *models.Friend
func (_e *MockFriendRepository_Expecter) Update(db interface{}, data interface{}) *MockFriendRepository_Update_Call {
	return &MockFriendRepository_Update_Call{Call: _e.mock.On("Update", db, data)}
}

func (_c *MockFriendRepository_Update_Call) Run(run func(db *gorm.DB, data *models.Friend)) *MockFriendRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Friend))
	})
	return _c
}

func (_c *MockFriendRepository_Update_Call) Return(err error) *MockFriendRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFriendRepository_Update_Call) RunAndReturn(run func(*gorm.DB, *models.Friend) error) *MockFriendRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFriendRepository creates a new instance of MockFriendRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFriendRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFriendRepository {
	mock := &MockFriendRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
