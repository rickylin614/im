// Code generated by mockery v2.36.0. DO NOT EDIT.

package mock_repository

import (
	context "context"
	models "im/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockRouteCacheRepository is an autogenerated mock type for the IRouteCacheRepository type
type MockRouteCacheRepository struct {
	mock.Mock
}

type MockRouteCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRouteCacheRepository) EXPECT() *MockRouteCacheRepository_Expecter {
	return &MockRouteCacheRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, cond
func (_m *MockRouteCacheRepository) Get(ctx context.Context, cond *models.RouteCacheGet) (*models.RouteCache, error) {
	ret := _m.Called(ctx, cond)

	var r0 *models.RouteCache
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RouteCacheGet) (*models.RouteCache, error)); ok {
		return rf(ctx, cond)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.RouteCacheGet) *models.RouteCache); ok {
		r0 = rf(ctx, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RouteCache)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.RouteCacheGet) error); ok {
		r1 = rf(ctx, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRouteCacheRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRouteCacheRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - cond *models.RouteCacheGet
func (_e *MockRouteCacheRepository_Expecter) Get(ctx interface{}, cond interface{}) *MockRouteCacheRepository_Get_Call {
	return &MockRouteCacheRepository_Get_Call{Call: _e.mock.On("Get", ctx, cond)}
}

func (_c *MockRouteCacheRepository_Get_Call) Run(run func(ctx context.Context, cond *models.RouteCacheGet)) *MockRouteCacheRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.RouteCacheGet))
	})
	return _c
}

func (_c *MockRouteCacheRepository_Get_Call) Return(_a0 *models.RouteCache, _a1 error) *MockRouteCacheRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRouteCacheRepository_Get_Call) RunAndReturn(run func(context.Context, *models.RouteCacheGet) (*models.RouteCache, error)) *MockRouteCacheRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, cond
func (_m *MockRouteCacheRepository) Set(ctx context.Context, cond *models.RouteCacheSet) error {
	ret := _m.Called(ctx, cond)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RouteCacheSet) error); ok {
		r0 = rf(ctx, cond)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRouteCacheRepository_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockRouteCacheRepository_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - cond *models.RouteCacheSet
func (_e *MockRouteCacheRepository_Expecter) Set(ctx interface{}, cond interface{}) *MockRouteCacheRepository_Set_Call {
	return &MockRouteCacheRepository_Set_Call{Call: _e.mock.On("Set", ctx, cond)}
}

func (_c *MockRouteCacheRepository_Set_Call) Run(run func(ctx context.Context, cond *models.RouteCacheSet)) *MockRouteCacheRepository_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.RouteCacheSet))
	})
	return _c
}

func (_c *MockRouteCacheRepository_Set_Call) Return(_a0 error) *MockRouteCacheRepository_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouteCacheRepository_Set_Call) RunAndReturn(run func(context.Context, *models.RouteCacheSet) error) *MockRouteCacheRepository_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRouteCacheRepository creates a new instance of MockRouteCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRouteCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRouteCacheRepository {
	mock := &MockRouteCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
